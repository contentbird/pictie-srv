// Generated by CoffeeScript 1.3.3
(function() {
  var faye, _tools,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  faye = require('faye');

  _tools = require('../lib/tools.js');

  this.Client = (function() {

    function Client(server_url, user_info, group, authToken) {
      var url;
      this.user_info = user_info;
      this.group = group;
      this.authToken = authToken;
      this.notifyOnIncomingEvts = __bind(this.notifyOnIncomingEvts, this);

      this.signOutgoingMetaSubscriptions = __bind(this.signOutgoingMetaSubscriptions, this);

      this.addUserInfoToMetaSubscriptions = __bind(this.addUserInfoToMetaSubscriptions, this);

      url = server_url || 'http://localhost:5000/bayeux';
      this.client = new faye.Client(url);
    }

    Client.prototype.addUserInfoToMetaSubscriptions = function() {
      var _this = this;
      return this.client.addExtension({
        outgoing: function(message, callback) {
          if (message.channel === '/meta/subscribe') {
            if (message.ext == null) {
              message.ext = {};
            }
            message.ext.user_info = _this.user_info;
          }
          return callback(message);
        }
      });
    };

    Client.prototype.signOutgoingMetaSubscriptions = function() {
      var _this = this;
      return this.client.addExtension({
        outgoing: function(message, callback) {
          if (message.channel === '/meta/subscribe') {
            if (message.ext == null) {
              message.ext = {};
            }
            message.ext.group = _this.group;
            message.ext.authToken = _this.authToken;
          }
          return callback(message);
        }
      });
    };

    Client.prototype.notifyOnIncomingEvts = function(notify) {
      return this.client.addExtension({
        incoming: function(message, callback) {
          if (message.data !== void 0 && (message.data.evt === 'join' || message.data.evt === 'leave')) {
            return notify();
          } else {
            return callback(message);
          }
        }
      });
    };

    return Client;

  })();

}).call(this);
