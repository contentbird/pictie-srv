// Generated by CoffeeScript 1.3.3
(function() {
  'use strict';

  var faye, http, _app, _config, _memory_users, _redis_users,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  http = require('http', faye = require('faye'));

  _config = require('./config', _app = require('./app', _memory_users = require('./memory_users_manager', _redis_users = require('./redis_users_manager', this.Server = (function() {

    function Server() {
      this.startHTTP = __bind(this.startHTTP, this);

    }

    Server.prototype.startHTTP = function(http_port, callback) {
      var port;
      port = _config.port(http_port);
      this.app = new _app.ExpressApp;
      this.httpServer = http.createServer(this.app.app);
      return this.httpServer.listen(Number(port), function() {
        return callback();
      });
    };

    Server.prototype.attachFaye = function(engine, db) {
      var redis_url, _ref;
      if (db == null) {
        db = null;
      }
      if (engine === 'redis') {
        this.engine = 'redis';
        redis_url = _config.redis_url();
        this.bayeux = new faye.NodeAdapter({
          mount: '/bayeux',
          timeout: 20,
          engine: {
            type: redis,
            host: redis_url.hostname,
            port: parseInt(redis_url.port),
            password: (_ref = redis_url.auth) != null ? _ref.split(':').slice(-1)[0] : void 0
          }
        });
        this.users_manager = new _redis_users.RedisUsersManager(db);
      } else {
        this.engine = 'memory';
        this.bayeux = new faye.NodeAdapter({
          mount: '/bayeux',
          timeout: 20
        });
        this.users_manager = new _memory_users.MemoryUsersManager;
      }
      return this.bayeux.attach(this.httpServer);
    };

    Server.prototype.initApp = function() {
      return this.app.init(this.bayeux);
    };

    return Server;

  })()))));

}).call(this);
