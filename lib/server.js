// Generated by CoffeeScript 1.3.3
(function() {
  'use strict';

  var faye, http, _app, _memory_users, _push, _redis_users,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  http = require('http', faye = require('faye', _app = require('./app', _memory_users = require('./memory_users_manager', _redis_users = require('./redis_users_manager', _push = require('./push_service'))))));

  this.Server = (function() {

    function Server(config) {
      this.start = __bind(this.start, this);
      this.config = config;
      this.app = new _app.ExpressApp;
      this.httpServer = http.createServer(this.app.app);
      this.attachFaye();
      this.maintainUserList();
      this.initPushService();
      this.initApp();
    }

    Server.prototype.start = function(http_port, cb) {
      return this.httpServer.listen(Number(this.config.port(http_port)), function() {
        return cb();
      });
    };

    Server.prototype.attachFaye = function(engine, db) {
      var redis_url, _ref;
      if (db == null) {
        db = null;
      }
      if (engine === 'redis') {
        this.engine = 'redis';
        redis_url = _config.redis_url();
        this.bayeux = new faye.NodeAdapter({
          mount: '/bayeux',
          timeout: 20,
          engine: {
            type: redis,
            host: redis_url.hostname,
            port: parseInt(redis_url.port),
            password: (_ref = redis_url.auth) != null ? _ref.split(':').slice(-1)[0] : void 0
          }
        });
        this.users_manager = new _redis_users.RedisUsersManager(db);
      } else {
        this.engine = 'memory';
        this.bayeux = new faye.NodeAdapter({
          mount: '/bayeux',
          timeout: 20
        });
        this.users_manager = new _memory_users.MemoryUsersManager;
      }
      return this.bayeux.attach(this.httpServer);
    };

    Server.prototype.initPushService = function() {
      return this.push = new _push.PushService(this.users_manager);
    };

    Server.prototype.initApp = function() {
      return this.app.init(this.bayeux, this.users_manager, this.push);
    };

    Server.prototype.maintainUserList = function() {
      var _this = this;
      this.bayeux.addExtension({
        incoming: function(message, callback) {
          if (message.channel === '/meta/subscribe') {
            console.log("subscription coming: " + (JSON.stringify(message)));
            return _this.users_manager.subscribeUser(message, function() {
              console.log("client " + clientId + " subscribed to /meta/subscribe");
              return callback;
            });
          } else {
            return callback(message);
          }
        }
      });
      return this.bayeux.bind('disconnect', function(clientId) {
        console.log("disconnected client " + clientId);
        return _this.users_manager.unsubscribeUser(clientId, function() {
          return console.log("client " + clientId + " unsubscribed");
        });
      });
    };

    Server.prototype.stop = function() {
      return this.httpServer.close();
    };

    return Server;

  })();

}).call(this);
