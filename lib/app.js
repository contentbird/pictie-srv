// Generated by CoffeeScript 1.3.3
(function() {
  'use strict';

  var apn, bodyParser, express, morgan;

  express = require('express', bodyParser = require('body-parser', morgan = require('morgan', apn = require('apn'))));

  this.ExpressApp = (function() {

    function ExpressApp() {
      this.app = express();
    }

    ExpressApp.prototype.init = function(bayeux, users_manager) {
      var _this = this;
      this.app.use(morgan());
      this.app.use(bodyParser());
      this.app.use(express["static"](__dirname + '/public'));
      this.app.get('/', function(req, res) {
        return res.send('Pictie socket server is on /bayeux ; faye client is on bayeux/client.js');
      });
      this.app.get('/users', function(req, res) {
        return res.json(users_manager.allUsers());
      });
      this.app.all('/messages', function(req, res, next) {
        res.header("Access-Control-Allow-Origin", "*");
        res.header("Access-Control-Allow-Headers", "X-Requested-With, Content-Type");
        return next();
      });
      this.app.options('/messages', function(req, res) {
        return res.end();
      });
      this.app.post('/messages', function(req, res) {
        var message;
        message = {
          sender: req.body.sender,
          recipient: req.body.recipient,
          body: req.body.body
        };
        bayeux.getClient().publish("/user/" + req.body.recipient, {
          evt: 'message',
          message: message
        });
        return res.json(message);
      });
      this.app.post('/push_registration', function(req, res) {
        console.log("received post on /push_registration " + (JSON.stringify(req.body)));
        users_manager.storePushInfo(req.body.userId, req.body.pushProvider, req.body.pushToken);
        return res.json({
          'result': 'success'
        });
      });
      this.app.post('/push_test', function(req, res) {
        console.log("received post on /push_test with " + (JSON.stringify(req.body)));
        _this.sendNotification(users_manager, req.body.userId, req.body.message);
        return res.json({
          'result': 'success'
        });
      });
      return this.app.use(function(req, res, next) {
        return res.send(404, 'Sorry cant find that!');
      });
    };

    ExpressApp.prototype.sendNotification = function(users_manager, userId, message) {
      var apnConnection, device, errorCB, feedback, note, options, pushInfo, successCB, token;
      pushInfo = users_manager.retrievePushInfo(userId);
      console.log(("pushInfo for userId " + userId) + JSON.stringify(pushInfo));
      errorCB = function(err, notification) {
        return console.log(err + ' :: ' + notification);
      };
      successCB = function(notification, device) {
        return console.log("notification " + (JSON.stringify(notification)) + " transmitted to device " + (JSON.stringify(device)));
      };
      if (pushInfo['APNS'] != null) {
        token = pushInfo['APNS'];
        console.log("sending to token " + token);
        options = {
          cert: process.env.APN_CERT_PEM || "certs/apn_cert.pem",
          key: process.env.APN_KEY_PEM || "certs/apn_key.pem",
          passphrase: process.env.APN_KEY_PASS,
          errorCallback: errorCB
        };
        apnConnection = new apn.Connection(options);
        apnConnection.on("transmissionError", errorCB);
        apnConnection.on("error", errorCB);
        apnConnection.on("transmitted", successCB);
        apnConnection.on("cacheTooSmall", function(sizeDifference) {
          return console.log('Your cache is too small');
        });
        apnConnection.on("timeout", function() {
          return console.log('Timeout');
        });
        apnConnection.on("disconnected", function(openSockets) {
          return console.log('Disconnected');
        });
        apnConnection.on("connected", function() {
          return console.log('Connected');
        });
        device = new apn.Device(token);
        console.log("device is " + (JSON.stringify(device)));
        note = new apn.Notification();
        note.expiry = Math.floor(Date.now() / 1000) + 3600;
        note.badge = 1;
        note.sound = "ping.aiff";
        note.alert = "You have a new Pictie";
        note.payload = {
          'messageFrom': message.sender,
          'messageBody': message.body
        };
        apnConnection.pushNotification(note, device);
      } else {
        res.send("Only APNS notification supported");
      }
      feedback = new apn.Feedback({
        "batchFeedback": true,
        "interval": 300
      });
      return feedback.on("feedback", function(devices) {
        return devices.forEach(function(item) {
          return console.log("Device: " + item.device.toString('hex') + " has been unreachable, since: " + item.time);
        });
      });
    };

    return ExpressApp;

  })();

}).call(this);
