// Generated by CoffeeScript 1.3.3
(function() {

  this.MemoryUsersManager = (function() {

    function MemoryUsersManager() {
      this.users_list = {
        '/meta/subscribe': {}
      };
    }

    MemoryUsersManager.prototype.subscribeUser = function(message) {
      console.log('MemoryUsersManager - Subscribing user' + JSON.stringify(message));
      if (this.users_list['/meta/subscribe'] == null) {
        this.users_list['/meta/subscribe'] = {};
      }
      if (!(this.users_list['/meta/subscribe'][message.ext.userId] != null)) {
        this.users_list['/meta/subscribe'][message.ext.userId] = {
          'clients': {},
          'pushs': {}
        };
      }
      if (!(this.users_list['/meta/subscribe'][message.ext.userId]['clients'] != null)) {
        this.users_list['/meta/subscribe'][message.ext.userId]['clients'] = {};
      }
      this.users_list['/meta/subscribe'][message.ext.userId]['clients'][message.clientId] = new Date().getTime();
      return message;
    };

    MemoryUsersManager.prototype.unsubscribeUser = function(clientId) {
      var userId, val, _ref, _results;
      console.log('MemoryUsersManager Unsubscribing user with clientId' + clientId);
      _ref = this.users_list['/meta/subscribe'];
      _results = [];
      for (userId in _ref) {
        val = _ref[userId];
        if (this.users_list['/meta/subscribe'][userId]['clients'][clientId + ''] != null) {
          _results.push(delete this.users_list['/meta/subscribe'][userId]['clients'][clientId + '']);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    MemoryUsersManager.prototype.storePushInfo = function(userId, pushProvider, pushToken) {
      console.log("MemoryUsersManager - Storing " + pushProvider + " token " + pushToken + " for user " + userId);
      if (!(this.users_list['/meta/subscribe'][userId] != null)) {
        this.users_list['/meta/subscribe'][userId] = {
          'clients': {},
          'pushs': {}
        };
      }
      if (!(this.users_list['/meta/subscribe'][userId]['pushs'] != null)) {
        this.users_list['/meta/subscribe'][userId]['pushs'] = {};
      }
      return this.users_list['/meta/subscribe'][userId]['pushs'][pushProvider] = pushToken;
    };

    MemoryUsersManager.prototype.allUsers = function() {
      return this.users_list['/meta/subscribe'];
    };

    return MemoryUsersManager;

  })();

}).call(this);
