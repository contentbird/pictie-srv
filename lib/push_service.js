// Generated by CoffeeScript 1.3.3
(function() {
  var apn, gcm;

  apn = require('apn');

  gcm = require('node-gcm');

  this.PushService = (function() {

    function PushService(usersManager) {
      var apnOptions, errorCB, successCB;
      this.usersManager = usersManager;
      apnOptions = {
        cert: process.env.APN_CERT_PEM || "certs/apn_cert.pem",
        key: process.env.APN_KEY_PEM || "certs/apn_key.pem",
        errorCallback: errorCB
      };
      this.apnConnection = new apn.Connection(apnOptions);
      this.gcmSender = new gcm.Sender(process.env.GCM_API_KEY);
      errorCB = function(err, notification) {
        return console.log(err + ' :: ' + notification);
      };
      successCB = function(notification, device) {
        return console.log("notification " + (JSON.stringify(notification)) + " transmitted to device " + (JSON.stringify(device)));
      };
      this.apnConnection.on("transmissionError", errorCB);
      this.apnConnection.on("error", errorCB);
      this.apnConnection.on("transmitted", successCB);
      this.apnConnection.on("cacheTooSmall", function(sizeDifference) {
        return console.log('Your cache is too small');
      });
      this.apnConnection.on("timeout", function() {
        return console.log('Timeout');
      });
      this.apnConnection.on("disconnected", function(openSockets) {
        return console.log('Disconnected');
      });
      this.apnConnection.on("connected", function() {
        return console.log('Connected');
      });
      this.feedback = new apn.Feedback({
        "batchFeedback": true,
        "interval": 300
      });
      this.feedback.on("feedback", function(devices) {
        return devices.forEach(function(item) {
          return console.log("Device: " + item.device.toString('hex') + " has been unreachable, since: " + item.time);
        });
      });
    }

    PushService.prototype.sendNotification = function(userId, message) {
      var device, extraParams, messageCount, nbRetries, note, notifTitle, pushInfo, token;
      pushInfo = this.usersManager.retrievePushInfo(userId);
      notifTitle = "You have a new Pictie from " + message.sender;
      messageCount = 1;
      extraParams = {
        'messageFrom': message.sender,
        'messageBody': message.body
      };
      if (pushInfo['APNS'] != null) {
        token = pushInfo['APNS'];
        device = new apn.Device(token);
        note = new apn.Notification();
        note.expiry = Math.floor(Date.now() / 1000) + 3600;
        note.badge = messageCount;
        note.sound = "ping.aiff";
        note.alert = notifTitle;
        note.payload = extraParams;
        return this.apnConnection.pushNotification(note, device);
      } else {
        token = pushInfo['GCM'];
        extraParams.msgcnt = messageCount;
        extraParams.soundname = "beep.wav";
        extraParams.message = notifTitle;
        message = new gcm.Message({
          data: extraParams
        });
        nbRetries = 3;
        return this.gcmSender.send(message, [token], nbRetries, function(err, result) {
          return console.log(result);
        });
      }
    };

    return PushService;

  })();

}).call(this);
